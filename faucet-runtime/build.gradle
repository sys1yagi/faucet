import com.android.build.gradle.LibraryPlugin
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

repositories {
    mavenCentral()
    maven { url 'https://raw.github.com/sys1yagi/leak-checker/master/repository' }
}

buildscript {
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
        classpath 'org.aspectj:aspectjtools:1.7.4'
    }
}

apply plugin: 'android-library'

dependencies {
    compile 'org.aspectj:aspectjrt:1.7.4'
    compile 'com.sys1yagi:leak-checker:0.0.1'
}

android {
    compileSdkVersion 18
    buildToolsVersion '19.0.3'

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 18
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

android.libraryVariants.all { variant ->
    LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = [
                "-showWeaveInfo",
                "-1.5",
                "-inpath", javaCompile.destinationDir.toString(),
                "-aspectpath", javaCompile.classpath.asPath,
                "-d", javaCompile.destinationDir.toString(),
                "-classpath", javaCompile.classpath.asPath,
                "-bootclasspath", plugin.runtimeJarList.join(File.pathSeparator)
        ]

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}

// Use Maven to install the aar into our local maven repo. Quick and easy (and dirty).
task install(type: Exec, dependsOn: assemble) {
    // TODO get aar path dynamically when i'm not being lazy
    executable = 'mvn'
    args = [
            "install:install-file",
            "-DgroupId=com.sys1yagi",
            "-DartifactId=faucet-runtime",
            "-Dversion=${version}",
            "-Dpackaging=aar",
            "-Dfile=build/libs/faucet-runtime-${version}.aar"
    ]
}

def deployTo = new File(rootDir, "repo-runtime")

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://${deployTo}"
            pom.version = VERSION_NAME
            pom.groupId = 'com.sys1yagi'
            pom.artifactId = 'faucet-runtime'
        }
    }
}

